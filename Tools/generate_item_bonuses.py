import os
import concurrent.futures

from dm_tools import (
    get_latest_game_version,
    DB2,
    ITEMBONUS_DB2,
    ItemBonus,
    ITEMBONUSLIST_DB2,
    ItemBonusList,
    ITEMBONUSLISTGROUP_DB2,
    ItemBonusListGroup,
    ITEMBONUSLISTGROUPENTRY_DB2,
    ItemBonusListGroupEntry,
)

from dm_logging import get_logger

logger = get_logger()

MAX_THREADS = os.cpu_count()
UPDATE_ALL = False

parent_directory = os.path.dirname(os.getcwd())
ADDON_DIR = os.path.join(parent_directory, "Datamine_Static")
OUTPUT_DIR = os.path.join(ADDON_DIR, "Generated")

FILE_NAME = os.path.basename(__file__)

WOW_DIR = "F:/Games/World of Warcraft"
FLAVOR = "wow"

TOC_FILE_LIST_LINE_NO = 17

os.makedirs(OUTPUT_DIR, exist_ok=True)

LUA_PREAMBLE = """-- This file was generated by {file}
-- Version: {version}

local _, Datamine_Static = ...;
"""

LUA_FORMAT = (
    LUA_PREAMBLE
    + """
Datamine_Static.{tableName} = {{
{data}
}};
"""
)


def tabs(depth: int):
    return "\t" * depth


_TABS = {1: tabs(1), 2: tabs(2), 3: tabs(3)}


def add_files_to_toc():
    toc_path = os.path.join(ADDON_DIR, "Datamine_Static.toc")
    with open(toc_path, "r") as f:
        toc_lines = f.readlines()

    with open(toc_path, "w") as f:
        f.truncate()
        f.writelines(toc_lines[:TOC_FILE_LIST_LINE_NO])

        for file in os.listdir(OUTPUT_DIR):
            if file.endswith(".lua"):
                f.write(f"Generated/{file}\n")
            else:
                os.remove(os.path.join(OUTPUT_DIR, file))


def lua_format(tableName: str, data: str):
    version = get_latest_game_version()
    return LUA_FORMAT.format(
        file=FILE_NAME, version=version, tableName=tableName, data=data
    )


def format_bonuses(bonuses: list[ItemBonus]):
    all_bonuses = ""

    first_line = True
    for itemBonus in bonuses:
        bonus_tbl = f"{_TABS[1]}[{itemBonus.ID}] = {{"

        if not first_line:
            bonus_tbl = "\n" + bonus_tbl
        else:
            first_line = False

        bonus_tbl += f"\n{_TABS[2]}ID = {itemBonus.ID},"

        bonus_tbl += f"\n{_TABS[2]}Values = {{"
        bonus_tbl += f"\n{_TABS[3]}[0] = {itemBonus.Value_0},"
        bonus_tbl += f"\n{_TABS[3]}[1] = {itemBonus.Value_1},"
        bonus_tbl += f"\n{_TABS[3]}[2] = {itemBonus.Value_2},"
        bonus_tbl += f"\n{_TABS[3]}[3] = {itemBonus.Value_3},"
        bonus_tbl += f"\n{_TABS[2]}" + "},"

        bonus_tbl += (
            f"\n{_TABS[2]}"
            + f"ParentItemBonusListID = {itemBonus.ParentItemBonusListID},"
        )
        bonus_tbl += f"\n{_TABS[2]}" + f"Type = {itemBonus.Type},"
        bonus_tbl += f"\n{_TABS[2]}" + f"OrderIndex = {itemBonus.OrderIndex}"

        bonus_tbl += f"\n{_TABS[1]}" + "},"

        all_bonuses += bonus_tbl

    return all_bonuses


def format_bonus_lists(bonusLists: list[ItemBonusList]):
    allBonusLists = ""

    first_line = True
    for itemBonusList in bonusLists:
        tbl = f"{_TABS[1]}[{itemBonusList.ID}] = {{"

        if not first_line:
            tbl = "\n" + tbl
        else:
            first_line = False

        tbl += f"\n{_TABS[2]}ID = {itemBonusList.ID},"
        tbl += f"\n{_TABS[2]}Flags = {itemBonusList.Flags},"

        tbl += f"\n{_TABS[1]}" + "},"

        allBonusLists += tbl

    return allBonusLists


def format_bonus_groups(bonusGroups: list[ItemBonusListGroup]):
    allBonusGroups = ""

    first_line = True
    for bonusListGroup in bonusGroups:
        tbl = f"{_TABS[1]}[{bonusListGroup.ID}] = {{"

        if not first_line:
            tbl = "\n" + tbl
        else:
            first_line = False

        tbl += f"\n{_TABS[2]}ID = {bonusListGroup.ID},"
        tbl += f"\n{_TABS[2]}SequenceSpellID = {bonusListGroup.SequenceSpellID},"
        tbl += f"\n{_TABS[2]}PlayerConditionID = {bonusListGroup.PlayerConditionID},"
        tbl += f"\n{_TABS[2]}ItemExtendedCostID = {bonusListGroup.ItemExtendedCostID},"
        tbl += f"\n{_TABS[2]}ItemLogicalCostGroupID = {bonusListGroup.ItemLogicalCostGroupID},"
        tbl += f"\n{_TABS[2]}ItemGroupIlvlScalingID = {bonusListGroup.ItemGroupIlvlScalingID},"

        tbl += f"\n{_TABS[1]}" + "},"

        allBonusGroups += tbl

    return allBonusGroups


def format_bonus_group_entries(bonusGroupEntries: list[ItemBonusListGroupEntry]):
    allBonusGroupEntries = ""

    first_line = True
    for bonusGroupEntry in bonusGroupEntries:
        tbl = f"{_TABS[1]}[{bonusGroupEntry.ID}] = {{"

        if not first_line:
            tbl = "\n" + tbl
        else:
            first_line = False

        tbl += f"\n{_TABS[2]}ID = {bonusGroupEntry.ID},"
        tbl += f"\n{_TABS[2]}ItemBonusListGroupID = {bonusGroupEntry.ItemBonusListGroupID},"
        tbl += f"\n{_TABS[2]}ItemBonusListID = {bonusGroupEntry.ItemBonusListID},"
        tbl += (
            f"\n{_TABS[2]}ItemLevelSelectorID = {bonusGroupEntry.ItemLevelSelectorID},"
        )
        tbl += f"\n{_TABS[2]}SequenceValue = {bonusGroupEntry.SequenceValue},"
        tbl += f"\n{_TABS[2]}ItemExtendedCostID = {bonusGroupEntry.ItemExtendedCostID},"
        tbl += f"\n{_TABS[2]}PlayerConditionID = {bonusGroupEntry.PlayerConditionID},"
        tbl += f"\n{_TABS[2]}Flags = {bonusGroupEntry.Flags},"
        tbl += f"\n{_TABS[2]}ItemLogicalCostGroupID = {bonusGroupEntry.ItemLogicalCostGroupID},"

        tbl += f"\n{_TABS[1]}" + "},"

        allBonusGroupEntries += tbl

    return allBonusGroupEntries


def write(tableName: str, db2: DB2, format_func):
    things = [thing for thing in db2.read()]
    data = format_func(things)

    output_file = os.path.join(OUTPUT_DIR, f"{tableName}.lua")
    with open(output_file, "w") as f:
        f.write(lua_format(tableName=tableName, data=data))


with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_THREADS) as executor:
    futures = [
        executor.submit(write, "ItemBonus", ITEMBONUS_DB2, format_bonuses),
        executor.submit(write, "ItemBonusList", ITEMBONUSLIST_DB2, format_bonus_lists),
        executor.submit(
            write, "ItemBonusListGroup", ITEMBONUSLISTGROUP_DB2, format_bonus_groups
        ),
        executor.submit(
            write,
            "ItemBonusListGroupEntry",
            ITEMBONUSLISTGROUPENTRY_DB2,
            format_bonus_group_entries,
        ),
    ]

    for task in concurrent.futures.as_completed(futures):
        if task.exception() is not None:
            logger.exception(f"Encountered an error handling task: {task.exception()}")

    concurrent.futures.wait(futures)

add_files_to_toc()
